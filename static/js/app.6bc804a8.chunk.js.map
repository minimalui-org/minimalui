{"version":3,"sources":["src/components/ButtonScreen.tsx","src/Navigator.tsx","App.tsx"],"names":["ButtonScreen","colors","style","width","map","variant","color","key","onPress","RootStack","createDrawerNavigator","linking","enabled","prefixes","Drawer","props","DrawerContentScrollView","DrawerItemList","Navigator","type","useDimensions","useState","isReady","setIsReady","initialState","setInitialState","theme","useTheme","useEffect","a","async","AsyncStorage","getItem","savedStateString","undefined","state","JSON","parse","restoreState","navigationTheme","dark","palette","background","default","border","divider","card","notification","secondary","primary","text","permanentDrawer","NavigationContainer","onStateChange","setItem","stringify","drawerContent","drawerType","Screen","component","Components","name","App","useFonts","NotoSansRegular","NotoSans_400Regular","NotoSansBold","NotoSans_700Bold","loaded","x","useRef","Animated","Value","current","y"],"mappings":"oPAGaA,EAAwC,WACnD,IACMC,EAAS,CACb,UACA,UACA,YACA,QACA,OACA,UACA,WAGF,OACE,kBAAC,aAAD,CAAYC,MAAO,CAAEC,MAAO,SAC1B,kBAAC,YAAD,KAba,CAAC,OAAQ,YAAa,WAAY,YAcnCC,KAAI,SAACC,GAAD,OACZJ,EAAOG,KAAI,SAACE,GAAD,OACT,kBAAC,YAAD,CAAWC,IAAQF,EAAL,IAAgBC,GAC5B,kBAAC,SAAD,CAAQA,MAAOA,EAAOE,QAAS,kBAAM,MAAMH,QAASA,GAC9CA,EADN,IACiBC,aCTzBG,EAAYC,cAEZC,EAAU,CAAEC,SAAS,EAAMC,SAAU,CAAC,uBAEtCC,EAA+D,SACnEC,GAEA,OACE,kBAACC,EAAA,EAA4BD,EAC3B,kBAACE,EAAA,EAAmBF,KAsEXG,EAjEmC,WAAO,IAC/CC,EAASC,0BAATD,KAD8C,EAExBE,oBAAS,GAFe,WAE/CC,EAF+C,KAEtCC,EAFsC,OAGdF,qBAHc,WAG/CG,EAH+C,KAGjCC,EAHiC,KAIhDC,EAAQC,qBAwBd,GAtBAC,qBAAU,WAiBHN,GAhBgB,qBAAAO,EAAAC,OAAA,2EAAAD,EAAA,MAGcE,IAAaC,QAAQ,qBAHnC,OAGXC,EAHW,YAQHC,KAJRC,EAAQF,EACVG,KAAKC,MAAMJ,QACXC,IAGFT,EAAgBU,GATD,uBAYjBZ,GAAW,GAZM,8EAiBnBe,KAED,CAAChB,KAECA,EACH,OAAO,KAGT,IAAMiB,EAAkB,CACtBC,KAA6B,SAAvBd,EAAMe,QAAQtB,KACpBlB,OAAQ,CACNyC,WAAYhB,EAAMe,QAAQC,WAAWC,QACrCC,OAAQlB,EAAMe,QAAQI,QACtBC,KAAM,QACNC,aAAcrB,EAAMe,QAAQO,UAC5BC,QAASvB,EAAMe,QAAQQ,QACvBC,KAAMxB,EAAMe,QAAQS,KAAKD,UAIvBE,EAA2B,OAAThC,GAA0B,OAATA,EAEzC,OACE,kBAACiC,EAAA,EAAD,CACE5B,aAAcA,EACdb,QAASA,EACT0C,cAAe,SAAClB,GAAD,OACbJ,IAAauB,QAAQ,mBAAoBlB,KAAKmB,UAAUpB,KAE1DT,MAAOa,GAEP,kBAAC9B,EAAUS,UAAX,CACEsC,cAAe,SAACzC,GAAD,OAAW,kBAAC,EAAWA,IACtC0C,WAAYN,EAAkB,YAAc,SAE5C,kBAAC1C,EAAUiD,OAAX,CAAkBC,UAAWC,EAAyBC,KAAK,cCzEpD,SAASC,IAA2B,IAAD,EAC/BC,YAAS,CACxBC,gBAAiBC,IACjBC,aAAcC,MAFTC,EADyC,YAK1CC,EAAIC,iBAAO,IAAIC,IAASC,MAAM,IAAIC,QAClCC,EAAIJ,iBAAO,IAAIC,IAASC,MAAM,IAAIC,QAExC,OAAKL,EAKH,kBAAC,iBAAD,CAAgBC,EAAGA,EAAGK,EAAGA,GACvB,kBAAC,EAAD,OALK,O","file":"static/js/app.6bc804a8.chunk.js","sourcesContent":["import { Button, Container, ScrollView } from \"@minimalui/core\";\nimport React from \"react\";\n\nexport const ButtonScreen: React.FunctionComponent = () => {\n  const variants = [\"text\", \"contained\", \"outlined\", \"gradient\"] as const;\n  const colors = [\n    \"default\",\n    \"primary\",\n    \"secondary\",\n    \"error\",\n    \"info\",\n    \"success\",\n    \"warning\",\n  ] as const;\n\n  return (\n    <ScrollView style={{ width: \"100%\" }}>\n      <Container>\n        {variants.map((variant) =>\n          colors.map((color) => (\n            <Container key={`${variant} ${color}`}>\n              <Button color={color} onPress={() => null} variant={variant}>\n                {`${variant} ${color}`}\n              </Button>\n            </Container>\n          ))\n        )}\n      </Container>\n    </ScrollView>\n  );\n};\n\nexport default ButtonScreen;\n","import { useDimensions, useTheme } from \"@minimalui/core\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport {\n  createDrawerNavigator,\n  DrawerContentComponentProps,\n  DrawerContentScrollView,\n  DrawerItemList,\n} from \"@react-navigation/drawer\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport React, { useEffect, useState } from \"react\";\n\nimport * as Components from \"./components\";\n\nconst RootStack = createDrawerNavigator();\n\nconst linking = { enabled: true, prefixes: [\"https://google.com\"] };\n\nconst Drawer: React.FunctionComponent<DrawerContentComponentProps> = (\n  props\n) => {\n  return (\n    <DrawerContentScrollView {...props}>\n      <DrawerItemList {...props} />\n    </DrawerContentScrollView>\n  );\n};\n\nexport const Navigator: React.FunctionComponent = () => {\n  const { type } = useDimensions();\n  const [isReady, setIsReady] = useState(true);\n  const [initialState, setInitialState] = useState();\n  const theme = useTheme();\n\n  useEffect(() => {\n    const restoreState = async () => {\n      try {\n        // Only restore state if there's no deep link and we're not on web\n        const savedStateString = await AsyncStorage.getItem(\"NAVIGATION_STATE\");\n        const state = savedStateString\n          ? JSON.parse(savedStateString)\n          : undefined;\n\n        if (state !== undefined) {\n          setInitialState(state);\n        }\n      } finally {\n        setIsReady(true);\n      }\n    };\n\n    if (!isReady) {\n      restoreState();\n    }\n  }, [isReady]);\n\n  if (!isReady) {\n    return null;\n  }\n\n  const navigationTheme = {\n    dark: theme.palette.type === \"dark\",\n    colors: {\n      background: theme.palette.background.default,\n      border: theme.palette.divider,\n      card: \"white\" || theme.palette.background.paper,\n      notification: theme.palette.secondary,\n      primary: theme.palette.primary,\n      text: theme.palette.text.primary,\n    },\n  };\n\n  const permanentDrawer = type === \"lg\" || type === \"xl\";\n\n  return (\n    <NavigationContainer\n      initialState={initialState}\n      linking={linking}\n      onStateChange={(state) =>\n        AsyncStorage.setItem(\"NAVIGATION_STATE\", JSON.stringify(state))\n      }\n      theme={navigationTheme}\n    >\n      <RootStack.Navigator\n        drawerContent={(props) => <Drawer {...props} />}\n        drawerType={permanentDrawer ? \"permanent\" : \"slide\"}\n      >\n        <RootStack.Screen component={Components.ButtonScreen} name=\"Button\" />\n      </RootStack.Navigator>\n    </NavigationContainer>\n  );\n};\n\nexport default Navigator;\n","/* eslint-disable sort-keys  */\n/* eslint-disable camelcase */\nimport {\n  NotoSans_400Regular,\n  NotoSans_700Bold,\n  useFonts,\n} from \"@expo-google-fonts/noto-sans\";\nimport { ScrollProvider } from \"@minimalui/core\";\nimport React, { useRef } from \"react\";\nimport { Animated } from \"react-native\";\n\nimport Navigator from \"./src/Navigator\";\n\nexport default function App(): JSX.Element | null {\n  const [loaded] = useFonts({\n    NotoSansRegular: NotoSans_400Regular,\n    NotoSansBold: NotoSans_700Bold,\n  });\n  const x = useRef(new Animated.Value(0)).current;\n  const y = useRef(new Animated.Value(0)).current;\n\n  if (!loaded) {\n    return null;\n  }\n\n  return (\n    <ScrollProvider x={x} y={y}>\n      <Navigator />\n    </ScrollProvider>\n  );\n}\n"],"sourceRoot":""}